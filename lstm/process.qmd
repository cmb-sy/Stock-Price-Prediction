---
title: ""
editor: source
date: "`r format(Sys.time(), '%Y/%m/%d')`"
toc: true
number-sections: true
format: 
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
jupyter: python3
---

# パッケージの読み込み

```{python}
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset

import os
from datetime import datetime
import math
import numpy as np
import pandas as pd
import pandas.tseries.offsets as offsets
import matplotlib.pyplot as plt

import yfinance as yf
from sklearn.preprocessing import MinMaxScaler

from tqdm import tqdm
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler
```

## データのダウンロード
- カラム情報(yf.downloadで得られる情報)
  - Price: 一般的には「Close（終値）」を指すことが多いですが、文脈によっては他の価格を指すこともあります。具体的な意味はデータの提供元によります。
  - Close（終値）: その日の取引が終了した時点の価格。
  - High（高値）: その日の取引中に記録された最も高い価格。
  - Low（安値）: その日の取引中に記録された最も低い価格。
  - Open（始値）: その日の取引が開始された時点の価格。
  - Volume（出来高）: その日の取引で売買された株式の総数。

```{python}
ticker = 'AAPL'
df = yf.download(ticker, start='2020-01-01', end='2023-01-01')

from_year = 3
ref_days = 60
code = '9861'
```

## データの前処理
```{python}
data = df["Close"] ##　Closeコラム（取引終了時の株価）のみ
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data.values)
print("scaled_data",scaled_data)
```

## 訓練データと検証データの分割
- スケーリングされたデータの最初の70%をトレーニングデータとして抽出
- scaled_dataのインデックス0からtraining_data_lenまでのデータをtrain_dataに格納します。

```{python}
training_data_len = int(np.ceil(len(dataset) * 0.7))
train_data = scaled_data[0:int(training_data_len), :]
```

```{python}
# ---5.訓練データの作成---
x_train = []
y_train = []

for i in tqdm(range(ref_days, len(train_data))):
   x_train.append(train_data[i-ref_days:i, 0])
   y_train.append(train_data[i, 0])
max_length = max(len(row) for row in x_train)

x_train_padded = []
for row in tqdm(x_train):
   if len(row) < max_length:
       row = np.pad(row, (0, max_length - len(row)), 'constant')
   x_train_padded.append(row)

x_train = np.array(x_train_padded)
y_train = np.array(y_train)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
```

```{python}

```

```{python}

```

```{python}

```

```{python}

```